Important list of questions to prepare for JavaScript interviews.

🔍 What is event delegation, and how does it function in JavaScript?
    
    - In JS Event delegation is a technique in JavaScript for handling events efficiently by taking advantage of the event bubbling mechanism. Instead of assigning event listeners directly to individual elements, you attach a single event listener to a common parent of those elements. Then, when the event occurs on any of the child elements, the event bubbles up to the parent, where it's handled.
    
    - In React implements its own event system called the synthetic event system. When you attach an event handler in a React component, you're actually attaching it to a virtual representation of the DOM element, not the real DOM element itself. React wraps native browser events into instances of synthetic events to ensure events have consistent properties and behaviors across different browsers.


🔍 Can you provide an illustration of how ES6 has altered the approach to working with "this" in JavaScript?
    - https://www.youtube.com/watch?v=rv7Q11KWmKU&ab_channel=RoadsideCoder

🔍 Explain the concept of prototypal inheritance.

🔍 Differentiate between a variable that is null, undefined, or undeclared.

🔍 Define what a closure is and describe its uses and advantages.

🔍 Explain the primary distinction between the Array.forEach() loop and Array.map() method, as well as when to choose one over the other.

🔍 What is a common scenario for employing anonymous functions?

🔍 Distinguish between host objects and native objects.

🔍 Clarify the distinctions among 'function User(){}', 'var user = User()', and 'var user = new User()

🔍 Can you elucidate the purposes of Function.call and Function.apply, along with their notable differences?

🔍 Describe the Function.prototype.bind method.

    function greet() {
        console.log("Hello, " + this.name);
    }

    let person = {name: "Alice"};
    let boundGreet = greet.bind(person);

    boundGreet();  // Output: "Hello, Alice"


🔍 Explain the differences between feature detection, feature inference, and utilizing the User Agent (UA) string.

    1. Feature Detection:
        What it is: Feature detection involves checking directly whether a specific feature or method is supported in the browser/runtime environment.

        if ('querySelector' in document) {
            document.querySelector("#id");
        } else {
            document.getElementById("id");
        }

    2. Feature Inference:
        What it is: Feature inference is about making an assumption that if one feature exists, another related feature probably exists too.    

        if (document.querySelector) {
            // If querySelector exists, then probably querySelectorAll also exists
            var elements = document.querySelectorAll(".class");
        }

    3 - 3. Using the User Agent (UA) String:
        What it is: The User Agent string is a text identifier sent with the HTTP headers that provides information about the browser, its version, and the operating system.

        if (navigator.userAgent.indexOf("MSIE") !== -1) {
            // Code specific to Internet Explorer
        }


🔍 Define the concept of "hoisting."
    - Its a way of moving variables and function to the top of the scope, so the compiler can understand properly like they belong.
    But ther is a caveat like the hoisting behaves differently for var, let n const.
    So if we r using var, it moves to the top and before ny code executes, it will assign the value as undefined.
    But in the case of let n const , they will hoist to the top but they will wait for reinitialozation or redifing.
    So this waiting phase we clled as temporal dead zone.
    So because of this , if we r trying to get the values or result of var before initializing we get an undefined, but in let and const 
    we get a reference error .

🔍 What is type coercion, and what are some common pitfalls associated with relying on it in JavaScript code?

🔍 Describe event bubbling and event capturing.

🔍 What distinguishes an "attribute" from a "property"?

🔍 List the advantages and disadvantages of extending built-in JavaScript objects.

🔍 Explain the differences between == and ===.

🔍 Discuss the same-origin policy's implications for JavaScript.

🔍 Why is it referred to as a "Ternary operator," and what does the term "Ternary" signify?

🔍 Define strict mode and outline some of its advantages and disadvantages.

🔍 Analyze the pros and cons of writing JavaScript code in a language that compiles to JavaScript.

🔍 What tools and techniques do you employ for debugging JavaScript code?

🔍 Enumerate the benefits and drawbacks of immutability and explain how you can achieve it in your code.

🔍 Differentiate between synchronous and asynchronous functions and elucidate the event loop.
🔍 Explain the disparities between variables created using let, var, or const.
🔍 Compare ES6 classes and ES5 function constructors, and furnish a use case for the arrow (=>) function syntax.
🔍 Describe the advantages of using the arrow syntax for methods in constructors.
🔍 Define a higher-order function and provide an example of object or array destructuring.
🔍 Give an example of generating a string using ES6 Template Literals and explain their benefits.
🔍 Provide an example of a curry function and clarify why this syntax can be advantageous.
🔍 Discuss the benefits of using spread syntax and differentiate it from rest syntax.
🔍 Explain how code sharing between files can be accomplished.
🔍 Define what a promise is and describe its applications.
🔍 Explore how Object-Oriented Programming (OOP) principles can be applied when coding in JavaScript.
🔍 Web Components ( https://www.youtube.com/watch?v=STZA_qtm1XU&list=PLEtjGa9VEukPRU9N_qHL-OAq5PZGVunNB&index=6&ab_channel=AnujSingla )
🔍 shadow DOM
🔍 create slots in DOM ( reusable component like react )
🔍 Lifecycle of Web component
🔍 TodoList with Web component


//////MOCK 
https://www.youtube.com/@Learnersbucket/playlists
https://www.youtube.com/watch?v=CPXf8Yv3I0A&list=PL8p2I9GklV45z6Cov4omIOsbptPR1kxpg
https://www.youtube.com/watch?v=FjnHF3CXEaM&ab_channel=RohanPrasad
https://www.youtube.com/watch?v=msWLFE5K1sQ&list=PLNYURJT_hZOlW-ZV1osN3fHJDYiK-Jx8A&ab_channel=CodingScenes
